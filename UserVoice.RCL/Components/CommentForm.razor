@inject UserVoiceDataContext Data
@inject DialogService Dialog

<EditForm Model="@Model" OnSubmit="OnSubmit">
    <DataAnnotationsValidator />

    <ValidationMessage For="@(() => Model.Body)" />
    <RadzenHtmlEditor @bind-Value="@Model.Body" Style="min-height:100px" class="w-100">
        <RadzenHtmlEditorUndo />
        <RadzenHtmlEditorRedo />
        <RadzenHtmlEditorSeparator />
        <RadzenHtmlEditorBold />
        <RadzenHtmlEditorItalic />
        <RadzenHtmlEditorUnderline />
        <RadzenHtmlEditorStrikeThrough />
        <RadzenHtmlEditorSeparator />
        <RadzenHtmlEditorUnorderedList />
        <RadzenHtmlEditorColor />
        <RadzenHtmlEditorBackground />
        <RadzenHtmlEditorRemoveFormat />
        <RadzenHtmlEditorSeparator />
        <RadzenHtmlEditorLink />
        <RadzenHtmlEditorUnlink />
        <RadzenHtmlEditorSeparator />
        <RadzenHtmlEditorImage />
    </RadzenHtmlEditor>

    <div class="d-flex justify-content-between mt-2">
        @if (CurrentUser?.Role == Role.ProductOwner && ItemType == ItemType.FeatureIdea)
        {
            <FormField Label="Feature Status:" LabelColumns="4">
                <RadzenDropDown Data="@(Dropdown.FromEnum<ItemStatus>())" TValue="ItemStatus?" ValueProperty="Key" TextProperty="Value" @bind-Value="@Model.ItemStatus" AllowClear="true">
                    <Template Context="item">
                        <div class="d-flex align-items-center">
                            <RadzenIcon Icon="@Data.StatusInfo[item.Key].Icon" class="me-2" Style="@Data.StatusInfo[item.Key].Style" />
                            <span>@Data.StatusInfo[item.Key].Text</span>
                        </div>
                    </Template>
                </RadzenDropDown>
            </FormField>
        }

        @if (AcceptanceRequestId.HasValue)
        {
            <div class="d-flex align-items-center">
                <RadzenLabel Text="Test Case Rejected" @onclick="@(() => Model.IsRejected = !Model.IsRejected)" class="mr-2 me-2" />
                <RadzenCheckBox @bind-Value="@Model.IsRejected" class="mr-2 me-2" />
                @if (Model.IsRejected)
                {
                    <RadzenIcon Icon="do_not_disturb_on" Style="color:red" />
                }
            </div>
        }

        <div class="d-flex align-items-center">
            <button type="submit" class="btn btn-secondary">Save</button>
            <Spinner @ref="spinner" />
        </div>
    </div>
</EditForm>

@code {
    Spinner? spinner;

    [Parameter]
    public int ItemId { get; set; }

    [Parameter]
    public User? CurrentUser { get; set; }

    [Parameter]
    public Comment Model { get; set; } = new();

    [Parameter]
    public ItemType ItemType { get; set; }

    [Parameter]
    public int? AcceptanceRequestId { get; set; }

    [Parameter]
    public EventCallback<Comment> CommentSaved { get; set; }

    async Task OnSubmit(EditContext editContext)
    {
        if (!editContext.Validate()) return;

        spinner?.Show();

        Data.User = CurrentUser ?? throw new ApplicationException("CurrentUser is required");
        Model.ItemId = ItemId;
        await Data.Comments.SaveAsync(Model);
        await CommentSaved.InvokeAsync(Model);

        Model = new();

        spinner?.Hide();
    }

}

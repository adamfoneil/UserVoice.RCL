@inject UserVoiceDataContext Data

<EditForm Model="@item" OnSubmit="OnSubmit">
    <DataAnnotationsValidator/>

    <div class="d-flex mb-2">
        <div class="col-2 me-1">            
            <RadzenDropDown Data="@(Dropdown.FromEnum<ItemType>())" TValue="ItemType" ValueProperty="Key" TextProperty="Value" @bind-Value="@item.Type" class="w-100">
                <Template Context="item">
                    <div class="d-flex align-items-center">
                        <RadzenIcon Icon="@Data.TypeInfo[item.Key].Icon" class="me-2" Style="@Data.TypeInfo[item.Key].Style" />
                        <span>@Data.TypeInfo[item.Key].SingularText</span>
                    </div>                    
                </Template>
            </RadzenDropDown>            
            <ValidationMessage For="@(() => item.Type)" />
        </div>

        <div class="col-10 ms-1">
            <RadzenTextBox @bind-Value="@item.Title" MaxLength="255" class="w-100 pl-1" Placeholder="Title" />
            <ValidationMessage For="@(() => item.Title)" />            
        </div>
    </div>
  
    <div>
        <ValidationMessage For="@(() => item.Body)" />
        <RadzenTextArea @bind-Value="@item.Body" Style="min-height:200px" class="w-100"/>
    </div>

    <div class="d-flex align-items-center">
        <button type="submit" class="btn btn-secondary">Save</button>
        <Spinner @ref="spinner"/>
    </div>
</EditForm>

@code {
    Item item = DefaultItem();
    Spinner? spinner;

    [Parameter]
    public User? CurrentUser { get; set; }

    [Parameter]
    public EventCallback<Item> ItemSaved { get; set; }

    async Task OnSubmit(EditContext editContext)
    {
        if (!editContext.Validate()) return;

        spinner?.Show();

        Data.User = CurrentUser ?? throw new ApplicationException("CurrentUser is required");
        await Data.Items.SaveAsync(item);
        await ItemSaved.InvokeAsync(item);
        item = DefaultItem();

        spinner?.Hide();
    }

    static Item DefaultItem() => new Item() { Type = ItemType.Issue };
}

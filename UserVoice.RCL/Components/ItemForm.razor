@inject UserVoiceDataContext Data
@inject DialogService Dialog

<EditForm Model="@Model" OnSubmit="OnSubmit">
    <DataAnnotationsValidator/>

    <div class="d-flex mb-2">
        <div class="col-2 me-1">            
            <RadzenDropDown Data="@allowedTypes" TValue="ItemType" ValueProperty="Key" TextProperty="Value" @bind-Value="@Model.Type" class="w-100">
                <Template Context="item">
                    <div class="d-flex align-items-center">
                        <RadzenIcon Icon="@Data.TypeInfo[item.Key].Icon" class="me-2" Style="@Data.TypeInfo[item.Key].Style" />
                        <span>@Data.TypeInfo[item.Key].SingularText</span>
                    </div>                    
                </Template>
            </RadzenDropDown>            
            <ValidationMessage For="@(() => Model.Type)" />
        </div>

        <div class="col-10 ms-1">
            <RadzenTextBox @bind-Value="@Model.Title" MaxLength="255" class="w-100 pl-1" Placeholder="Title" />
            <ValidationMessage For="@(() => Model.Title)" />            
        </div>
    </div>
  
    <div>
        <ValidationMessage For="@(() => Model.Body)" />
        <RadzenHtmlEditor @bind-Value="@Model.Body" Style="min-height:200px" class="w-100">
            <RadzenHtmlEditorUndo />
            <RadzenHtmlEditorRedo />
            <RadzenHtmlEditorSeparator />
            <RadzenHtmlEditorBold />
            <RadzenHtmlEditorItalic />
            <RadzenHtmlEditorUnderline />
            <RadzenHtmlEditorStrikeThrough />
            <RadzenHtmlEditorSeparator />
            <RadzenHtmlEditorUnorderedList />
            <RadzenHtmlEditorColor />
            <RadzenHtmlEditorBackground />
            <RadzenHtmlEditorRemoveFormat />            
            <RadzenHtmlEditorSeparator/>
            <RadzenHtmlEditorLink/>
            <RadzenHtmlEditorUnlink />
            <RadzenHtmlEditorSeparator/>
            <RadzenHtmlEditorImage/>
        </RadzenHtmlEditor>
    </div>
    
    <div class="my-2 d-flex align-items-center justify-content-between">
        @if ((CurrentUser?.MayAssignAcceptanceRequests ?? false) && Model.Type == ItemType.TestCase)
        {
            <FormField Label="Assign To:" LabelColumns="4">
                <RadzenDropDown @bind-Value="@Model.AssignToUserId" Data="users" ValueProperty="Id" TextProperty="Name"/>
            </FormField>
        }

        <div class="d-flex align-items-center">
            <button type="submit" class="btn btn-secondary">Save</button>
            <Spinner @ref="spinner" />
        </div>
    </div>    

</EditForm>

@code {
    Spinner? spinner;
    IEnumerable<User> users = Enumerable.Empty<User>();
    Dictionary<ItemType, string> allowedTypes = new();

    [Parameter]
    public User? CurrentUser { get; set; }

    [Parameter]
    public EventCallback<Item> ItemSaved { get; set; }

    [Parameter]
    public Item Model { get; set; } = new();

    [Parameter]
    public ItemType DefaultType { get; set; } = ItemType.Issue;

    protected override async Task OnInitializedAsync()
    {        
        allowedTypes = Item.AllowedTypes[CurrentUser?.Role ?? Role.User].ToDictionary(it => it, it => Dropdown.FormatEnumName(it.ToString()));
        users = await new ListUsers() { Role = Role.SignOffUser }.ExecuteAsync(Data.GetConnection);
    }

    async Task OnSubmit(EditContext editContext)
    {
        if (!editContext.Validate()) return;

        spinner?.Show();

        Data.User = CurrentUser ?? throw new ApplicationException("CurrentUser is required");
        await Data.Items.SaveAsync(Model);
        await ItemSaved.InvokeAsync(Model);
        Model = new() { Type = DefaultType };

        spinner?.Hide();
    }
}

@using UserVoice.RCL.Service.Queries;
@inject UserVoiceDataContext Data

<ul class="list-group list-group-flush my-2">
    @foreach (var item in items)
    {
        <li class="my-1 list-group-item">
            <div class="d-flex align-items-start">
                <div class="mr-3 me-3">
                    <RadzenIcon Icon="campaign" Style="@Data.TypeInfo[ItemType.ReleaseNote].Style"/>
                </div>
                <div>
                    <div class="text-muted small">@item.DateCreated.ElapsedRelative(CurrentUser?.LocalTime ?? DateTime.Now)</div>
                    <div>
                        @if (ItemLinkTemplate is null)
                        {
                            if (!string.IsNullOrEmpty(ViewAllLink))
                            {
                                <a href="@ViewAllLink">@item.Title</a>
                            }
                            else
                            {
                                <span>@item.Title</span>
                            }                            
                        }
                        else
                        {
                            <a href="@ItemLinkTemplate.Invoke(item)">@item.Title</a>
                        }
                    </div>
                </div>
            </div>            
        </li>
    }
</ul>

<div class="d-flex justify-content-between mb-3">
    @if (ViewAllLink is not null)
    {
        <div>
            <a href="@ViewAllLink">View Changelog</a>
        </div>        
    }
    
    @if (items.Any())
    {
        <RadzenButton Text="Dismiss" Click="DismissItems" />
    }
</div>

@code {
    IEnumerable<Item> items = Enumerable.Empty<Item>();

    [Parameter]
    public User? CurrentUser { get; set; }

    [Parameter]
    public int? Top { get; set; }

    [Parameter]
    public Func<Item, string>? ItemLinkTemplate { get; set; }

    [Parameter]
    public string ViewAllLink { get; set; } = default!;

    protected override async Task OnInitializedAsync() => await Refresh();

    async Task Refresh()
    {
        items = await new MyReleaseNotes()
        {
            UserName = CurrentUser?.Name ?? "system",
            Top = Top
        }.ExecuteAsync(Data.GetConnection);
    }

    async Task DismissItems()
    {
        await Data.ReleaseNoteMarkers.MarkNowAsync(CurrentUser ?? throw new Exception("CurrentUser must be set"));
        await Refresh();
        StateHasChanged();
    }
}
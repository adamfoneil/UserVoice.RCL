@using CopyObjectLibrary
@inject UserVoiceDataContext Data
@inject DialogService Dialog
@using Dapper.QX.Extensions

<ul class="list-group">
    @foreach (var comment in Comments)
    {
        <li class="list-group-item">
            <strong>@comment.CreatedBy</strong>
            <span class="text-muted ml-2 ms-2">@comment.DateCreated.ElapsedRelative(DateTime.Now)</span>
            <div>
                @if (edit.IsTrue(comment.Id))
                {
                    <CommentForm CurrentUser="@CurrentUser" Model="comment" CommentSaved="OnCommentSaved" AcceptanceRequestId="@AcceptanceRequestId"/>
                }
                else
                {
                    @comment.Body.ToMarkup()
                }

                @if (comment.CreatedBy?.Equals(CurrentUser?.Name) ?? false)
                {
                    <hr/>
                    <div class="d-flex align-items-center justify-content-between">
                        <div>
                        </div>
                    </div>
                }
            </div>
        </li>
    }
    <li class="list-group-item">
        <CommentForm CurrentUser="@CurrentUser" Model="comment" ItemId="@ItemId" CommentSaved="OnCommentSaved" AcceptanceRequestId="@AcceptanceRequestId"/>
    </li>
</ul>

@code {
    Comment comment = new();

    Dictionary<int, bool> edit = new();

    [Parameter]
    public User? CurrentUser { get; set; }

    [Parameter]
    public int ItemId { get; set; }

    [Parameter]
    public ItemType ItemType { get; set; }

    [Parameter]
    public int? AcceptanceRequestId { get; set; }

    [Parameter]
    public IEnumerable<Comment> Comments { get; set; } = Enumerable.Empty<Comment>();

    protected override void OnParametersSet()
    {
        comment.AcceptanceRequestId = AcceptanceRequestId;
    }

    async Task Refresh()
    {
        Comments = await new ListComments()
        {
            ItemIds = new[] { ItemId }.ToDataTable()
        }.ExecuteAsync(Data.GetConnection);

        StateHasChanged();
    }

    [Parameter]
    public EventCallback<Comment> CommentSaved { get; set; }

    async Task OnCommentSaved(Comment comment)
    {
        await CommentSaved.InvokeAsync(comment);
        await Refresh();
    }

}

@inject UserVoiceDataContext Data

<div class="d-flex justify-content-center my-2">
    @foreach (var typeGrp in items.GroupBy(row => row.Type))
    {
        <div class="mx-3">
            <RadzenButton Icon="@Data.TypeInfo[typeGrp.Key].Icon" Text="@Data.TypeInfo[typeGrp.Key].PluralText" Click="@(() => ApplyFilter(typeGrp.Key))" ButtonStyle="ButtonStyle.Secondary"/>
        </div>
    }
    @if (query.Type.HasValue)
    {
        <div class="mx-3">
            <RadzenButton Text="Show All" Click="@(async () => { query.Type = null; await Refresh(); })"/>
        </div>
    }
</div>

<hr/>

<RadzenDataList Data="@items">
    <Template Context="row">        
        <div class="d-flex">
            <div class="text-muted me-1">
                #@(row.Id)
            </div>

            <div class="ms-1">
                @row.Title
            </div>
        </div>        
    </Template>
</RadzenDataList>

@code {
    ListItems query = new();
    IEnumerable<ListItemsResult> items = Enumerable.Empty<ListItemsResult>();    

    protected override async Task OnInitializedAsync()
    {
        await Refresh();
    }

    async Task Refresh()
    {
        items = await query.ExecuteAsync(Data.GetConnection);
        StateHasChanged();
    }

    async Task ApplyFilter(ItemType itemType)
    {
        query.Type = itemType;
        await Refresh();
    }
}
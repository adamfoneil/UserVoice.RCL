@using Dapper.QX.Extensions
@inject UserVoiceDataContext Data

<div class="d-flex justify-content-center my-2">
    <div class="d-flex align-items-center">
        <RadzenCheckBox @bind-Value="@query.IsActive" Change="(async () => await Refresh())" TValue="bool?" />
        <span @onclick="@(async () => { query.IsActive = !query.IsActive; await Refresh(); })" style="cursor:pointer" class="ml-2 ms-2">Active Items</span>
    </div>

    @foreach (var typeGrp in items.GroupBy(row => row.Type))
    {
        <div class="mx-3">
            <RadzenButton Icon="@Data.TypeInfo[typeGrp.Key].Icon" 
                Text="@Data.TypeInfo[typeGrp.Key].PluralTextWithCount(typeGrp.Count())" Click="@(() => ApplyFilter(typeGrp.Key))" 
                ButtonStyle="ButtonStyle.Secondary"/>
        </div>
    }
    @if (query.Type.HasValue)
    {
        <div class="mx-3">
            <RadzenButton Text="Show All" Click="@(async () => { query.Response = null; query.Type = null; await Refresh(); })"/>
        </div>
    }

    <div class="mx-3 d-flex align-items-center">
        <div class="mr-2 me-2">Sort By:</div>
        <RadzenDropDown Data="@(Dropdown.FromEnum<ListItemsSortOptions>())" ValueProperty="Key" TextProperty="Value" @bind-Value="@query.Sort" Change="@Refresh"/>
    </div>

    <div class="mx-3">
        <Pager @bind-Value="@query.Page" Change="Refresh"/>
    </div>
</div>

@if (query.Type == ItemType.TestCase)
{
    <div class="d-flex justify-content-center my-2 align-items-center">
        @foreach (var item in acceptanceMetrics.Where(row => row.Percent > 0))
        {
            <div class="mx-3">
                <a href="#" class="mr-2 me-2" @onclick:preventDefault @onclick="@(async () => { query.Response = item.Response; await Refresh(); })">@item.Response.ToString()</a>
                <span>@item.Percent.ToString("p0")</span>
            </div>
        }
        <div class="mx-3 d-flex align-items-center">
            <div class="mr-2 me-2">Assigned To:</div>
            <RadzenDropDown @bind-Value="@query.AssignedToUserId" Data="users" ValueProperty="Id" TextProperty="Name" Change="Refresh" AllowClear="true"/>
        </div>
    </div>
}

@ChildContent

<RadzenDataList Data="@items">
    <Template Context="row">        
        <div class="d-flex justify-content-between">
            <div class="d-flex align-items-center" style="cursor:pointer" @onclick="@(() => ToggleSection(row.Id))">
                <div class="text-muted d-flex align-items-center">
                    <RadzenIcon Icon="@Data.TypeInfo[row.Type].Icon" class="mr-1 me-2" Style="@Data.TypeInfo[row.Type].Style"/>                    
                    <span class="text-muted">#@(row.Id)</span>                    
                </div>

                <div class="ms-2 ml-2">
                    @row.Title
                </div>

                <div class="ms-2 ml-2 text-muted small" title="@row.DateInfo()">
                    @row.PostDate.ElapsedRelative(CurrentUser?.LocalTime ?? DateTime.Now)
                </div>

                <ExpandToggle OnToggled="@((val) => OnSectionToggled(row.Id, val))" @bind-Value="@expand[row.Id]" class="ml-2 ms-2"/>
            </div>

            <div>
                @if (row.ItemStatus.HasValue)
                {
                    <div>
                        <RadzenIcon Icon="@Data.StatusInfo[row.ItemStatus.Value].Icon" Style="@Data.StatusInfo[row.ItemStatus.Value].Style" />
                    </div>                    
                }

                @if (acceptanceRequests[row.Id].Any())
                {
                    <div>
                        @foreach (var responseGrp in acceptanceRequests[row.Id].GroupBy(row => row.Response))
                        {
                            <div class="d-flex align-items-start">
                                <div class="d-flex align-items-center">
                                    <RadzenIcon Icon="@Data.ResponseInfo[responseGrp.Key].Icon" Style="@Data.ResponseInfo[responseGrp.Key].Style" class="me-1 mr-1" />
                                    <span>@Data.ResponseInfo[responseGrp.Key].Text</span>
                                </div>
                                <ul>
                                    @foreach (var ar in responseGrp)
                                    {
                                        <li class="d-flex align-items-center">
                                            <div class="mr-1 me-1">@ar.UserName</div>
                                            @if (ar.UserId == CurrentUser?.Id)
                                            {                                                
                                                <AcceptButton @bind-Value="@ar.Response" Change="@((val) => OnAcceptChanged(ar.Id, val))" class="ml-1 ms-1" />
                                            }
                                        </li>
                                    }
                                </ul>
                            </div>
                        }
                    </div>
                }
                
                @if (row.NeedsSignOff)
                {
                    <FormField Label="Assign To:" LabelColumns="4">
                        <RadzenDropDown Data="users" ValueProperty="Id" TextProperty="Name" TValue="int?" AllowClear="true" Change="@((val) => CreateAcceptanceRequest(val, row.Id))" />
                    </FormField>
                }
            </div>            
        </div>
        @if (expand.IsTrue(row.Id))
        {
            <div class="ml-5 ms-5 mt-2">
                <RadzenCard>
                    @if (edit.IsTrue(row.Id))
                    {
                        <ItemForm Model="row" ItemSaved="@(async () => { edit[row.Id] = false; await Refresh(); })" CurrentUser="@CurrentUser"/>
                    }
                    else
                    {
                        @row.Body.ToMarkup()
                    }
                    
                    @if (row.CreatedBy?.Equals(CurrentUser?.Name) ?? false)
                    {
                        <hr/>
                        <div class="d-flex align-items-center justify-content-between">
                            <div>
                                <RadzenCheckBox @bind-Value="@row.IsActive" Change="@((val) => OnActiveChange(row))" TValue="bool" />
                                <span @onclick="@(async () => { row.IsActive = !row.IsActive; await OnActiveChange(row); })" style="cursor:pointer" class="ml-2 ms-2">Active</span>
                                @if (!edit.IsTrue(row.Id))
                                {
                                    <RadzenButton Text="Edit" Icon="edit" class="ml-2 ms-2" Click="@(() => edit[row.Id] = true)" />
                                }
                                else
                                {
                                    <div class="d-flex align-items-center">
                                        <RadzenButton Text="Cancel" Icon="cancel" class="ml-2 ms-2" ButtonStyle="ButtonStyle.Light" Click="@(() => edit[row.Id] = false)" />
                                    </div>
                                }
                            </div>

                            @if (row.Type == ItemType.TestCase)
                            {
                                <div class="mr-3 me-3">
                                    <FormField Label="Assign To:" LabelColumns="4">
                                        <RadzenDropDown Data="@users.Except(acceptanceRequests[row.Id].Select(ar => new User() { Name = ar.UserName, Email = ar.Email }))" ValueProperty="Id" TextProperty="Name" TValue="int?" AllowClear="true" Change="@((val) => CreateAcceptanceRequest(val, row.Id))" />
                                    </FormField>
                                </div>
                            }                            
                        </div>
                    }
                </RadzenCard>                
            </div>            
            <div>
                <CommentEditor 
                    Comments="@comments[row.Id]" CommentSaved="OnCommentSaved"
                    ItemId="@row.Id" CurrentUser="@CurrentUser" ItemType="@row.Type" AcceptanceRequestId="@GetAcceptanceRequestId(row.Id)"/>
            </div>
        }
    </Template>
</RadzenDataList>

@code {
    ListItems query = new();
    IEnumerable<ListItemsResult> items = Enumerable.Empty<ListItemsResult>();
    ILookup<int, Comment> comments = Enumerable.Empty<Comment>().ToLookup(row => row.ItemId);
    ILookup<int, AcceptanceRequest> acceptanceRequests = Enumerable.Empty<AcceptanceRequest>().ToLookup(row => row.ItemId);
    Dictionary<int, bool> expand = new();
    Dictionary<int, bool> edit = new();
    IEnumerable<User> users = Enumerable.Empty<User>();
    IEnumerable<AcceptanceMetricsResult> acceptanceMetrics = Enumerable.Empty<AcceptanceMetricsResult>();

    int? GetAcceptanceRequestId(int itemId)
    {
        var requests = acceptanceRequests[itemId].Where(row => row.Response == Response.Pending).ToDictionary(row => row.UserId);
        var userId = CurrentUser?.Id ?? 0;
        return requests.ContainsKey(userId) ? requests[userId].Id : null;
    }

    [Parameter]
    public User? CurrentUser { get; set; }

    [Parameter]
    public string? SearchText { get; set; }    

    [Parameter]
    public RenderFragment? ChildContent { get; set; }

    protected override async Task OnInitializedAsync()
    {
        users = await new ListUsers() { Role = Role.SignOffUser }.ExecuteAsync(Data.GetConnection);
        await Refresh();
    }

    protected override void OnParametersSet()
    {
        Data.User = CurrentUser;
    }

    public async Task Refresh()
    {
        query.Search = SearchText;
        items = await query.ExecuteAsync(Data.GetConnection);

        acceptanceRequests = (await new ListAcceptanceRequests()
        {
            ItemIds = items.Select(row => row.Id).ToDataTable()
        }.ExecuteAsync(Data.GetConnection)).ToLookup(row => row.ItemId);

        if (query.Type == ItemType.TestCase)
        {
            acceptanceMetrics = await new AcceptanceMetrics() { IsActive = query.IsActive ?? true }.ExecuteAsync(Data.GetConnection);
        }

        await RefreshComments();

        expand = items.ToDictionary(row => row.Id, row => false);
        StateHasChanged();
    }

    async Task ApplyFilter(ItemType itemType)
    {
        query.Type = itemType;
        await Refresh();
    }

    void ToggleSection(int itemId)
    {
        expand[itemId] = !expand[itemId];
        StateHasChanged();
    }

    void OnSectionToggled(int rowId, bool expanded)
    {
        expand[rowId] = !expanded;
        StateHasChanged();
    }

    async Task RefreshComments()
    {
        comments = (await new ListComments()
        {
            ItemIds = items.Select(row => row.Id).ToDataTable()
        }.ExecuteAsync(Data.GetConnection)).ToLookup(row => row.ItemId);
    }

    async Task OnCommentSaved(Comment comment) => await Refresh();

    async Task CreateAcceptanceRequest(object userIdValue, int itemId)
    {
        if (userIdValue is null) return;

        await Data.AcceptanceRequests.SaveAsync(new AcceptanceRequest()
        {
            UserId = (int)userIdValue,
            ItemId = itemId
        });

        await Refresh();
    }

    async Task OnAcceptChanged(int acceptanceRequestId, Response response)
    {
        var request = await Data.AcceptanceRequests.GetAsync(acceptanceRequestId);
        request.Response = response;
        await Data.AcceptanceRequests.SaveAsync(request);
    }

    async Task OnActiveChange(ListItemsResult row) => await Data.Items.SaveAsync(row);    
}